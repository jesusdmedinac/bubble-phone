default_platform(:android)

platform :android do
  desc "Run all KMP common tests"
  lane :test_kmp do
    sh("cd .. && ./gradlew :composeApp:allTests")
  end

  desc "Run Android unit tests"
  lane :test_android do
    sh("cd .. && ./gradlew :composeApp:testDebugUnitTest")
  end

  desc "Run all tests (KMP + Android)"
  lane :test do
    test_kmp
    test_android
  end

  desc "Build debug Bundle"
  lane :build_debug do
    sh("cd .. && ./gradlew :composeApp:bundleDebug")
  end

  desc "Build release APK"
  lane :build_release do
    sh("cd .. && ./gradlew :composeApp:bundleRelease")
  end

  desc "Run CI pipeline"
  lane :ci do
    unless ENV["CI"]
      UI.important("Not running in CI environment")
      next
    end
    
    test
    
    build_debug
    build_release
  end

  desc "Build and deploy a new version to Google Play Internal Testing"
  desc "This will build a release AAB and upload it to Google Play Internal Testing"
  lane :internal do |options|
    unless ENV["CI"] || ENV["FORCE_DEPLOY"]
      UI.important("This lane is meant to be run in CI environment")
      UI.important("Set FORCE_DEPLOY=true to run outside CI")
      next
    end

    build_release
    
    track = ENV["TRACK"] || 'internal'
    package_name = options[:package_name] || CredentialsManager::AppfileConfig.try_fetch_value(:package_name)
    
    aab_path = "composeApp/build/outputs/bundle/release/composeApp-release.aab"
    
    UI.message("Uploading #{aab_path} to Google Play (#{track})...")

    credentials_path = test_play_store_credentials

    upload_to_play_store(
      package_name: package_name,
      aab: aab_path,
      track: track,
      release_status: 'draft',
      skip_upload_apk: true,
      skip_upload_aab: false,
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      json_key: credentials_path,
      validate_only: false,
      timeout: 300
    )
    
    UI.success("✅ App uploaded successfully to Google Play (#{track} track)")
  end

  # Lane to test play-store-credentials.json content
  lane :test_play_store_credentials do
    # Buscar el archivo en la raíz del proyecto
    credentials_path = File.expand_path("../play-store-credentials.json", __dir__)
    
    unless File.exist?(credentials_path)
      UI.error("❌ play-store-credentials.json not found at: #{credentials_path}")
      next
    end

    UI.message("✅ Found credentials at: #{credentials_path}")
    credentials_path
  end
end