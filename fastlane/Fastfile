default_platform(:android)

platform :android do
  desc "Run all KMP common tests"
  lane :test_kmp do
    sh("cd .. && ./gradlew :composeApp:allTests")
  end

  desc "Run Android unit tests"
  lane :test_android do
    sh("cd .. && ./gradlew :composeApp:testDebugUnitTest")
  end

  desc "Run all tests (KMP + Android)"
  lane :test do
    test_kmp
    test_android
  end

  desc "Build debug Bundle"
  lane :build_debug do
    sh("cd .. && ./gradlew :composeApp:bundleDebug")
  end

  desc "Build release APK"
  lane :build_release do
    sh("cd .. && \
      KEYSTORE_PASSWORD='#{ENV['KEYSTORE_PASSWORD']}' \
      KEY_ALIAS='#{ENV['KEY_ALIAS']}' \
      KEY_PASSWORD='#{ENV['KEY_PASSWORD']}' \
      ./gradlew :composeApp:bundleRelease")
  end

  desc "Run CI pipeline"
  lane :ci do
    unless ENV["CI"]
      UI.important("Not running in CI environment")
      next
    end
    
    test
    
    build_debug
    build_release
  end

  desc "Build and deploy a new version to Google Play Internal Testing"
  desc "This will build a release AAB and upload it to Google Play Internal Testing"
  lane :internal do |options|
    unless ENV["CI"] || ENV["FORCE_DEPLOY"]
      UI.important("This lane is meant to be run in CI environment")
      UI.important("Set FORCE_DEPLOY=true to run outside CI")
      next
    end

    build_release
    
    track = ENV["TRACK"] || 'internal'
    package_name = options[:package_name] || CredentialsManager::AppfileConfig.try_fetch_value(:package_name)
    
    aab_path = "composeApp/build/outputs/bundle/release/composeApp-release.aab"
    
    UI.message("Uploading #{aab_path} to Google Play (#{track})...")

    credentials_path = test_play_store_credentials

    upload_to_play_store(
      package_name: package_name,
      aab: aab_path,
      track: track,
      release_status: 'draft',
      skip_upload_apk: true,
      skip_upload_aab: false,
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      json_key: credentials_path,
      validate_only: false,
      timeout: 300
    )
    
    UI.success("✅ App uploaded successfully to Google Play (#{track} track)")
  end

  lane :test_play_store_credentials do
    credentials_path = File.expand_path("../play-store-credentials.json", __dir__)
    
    unless File.exist?(credentials_path)
      UI.error("❌ play-store-credentials.json not found at: #{credentials_path}")
      next
    end

    UI.message("✅ Found credentials at: #{credentials_path}")
    credentials_path
  end

  def read_version_file
    version_file = File.expand_path("../version.properties", __dir__)
    
    unless File.exist?(version_file)
      UI.error("❌ version.properties not found at: #{version_file}")
      next
    end
    
    version_data = {}
    File.foreach(version_file) do |line|
      key, value = line.strip.split('=')
      version_data[key.downcase.to_sym] = value.to_i
    end
    
    version_data
  end

  desc "Commit version changes"
  lane :commit_version_changes do
    UI.message("Committing version changes...")
    
    version_data = read_version_file
    version_name = "#{version_data[:version_major]}.#{version_data[:version_minor]}.#{version_data[:version_patch]}"
    version_code = version_data[:version_code]

    sh("git add version.properties")
    sh("git commit -m 'Bump version to #{version_name} (#{version_code})'")
    UI.success("✅ Version changes committed")

    # Dev branch only for test purposes.
    # TODO: Change it to master
    sh("git push origin HEAD:dev")
    UI.success("✅ Version changes pushed to dev branch")
  end

  desc "Update version.properties"
  lane :update_version do |options|
    version_file = File.expand_path("../version.properties", __dir__)
    
    major = options[:major] || 0
    minor = options[:minor] || 0
    patch = options[:patch] || 0
    version_code = options[:version_code] || 0
    
    File.open(version_file, 'w') do |f|
      f.puts "VERSION_MAJOR=#{major}"
      f.puts "VERSION_MINOR=#{minor}"
      f.puts "VERSION_PATCH=#{patch}"
      f.puts "VERSION_CODE=#{version_code}"
    end
    
    UI.success("✅ Version updated to #{major}.#{minor}.#{patch} (#{version_code})")

    commit_version_changes
  end

  desc "Bump version and update version.properties"
  lane :bump_version do
    version_data = read_version_file
    
    patch = version_data[:version_patch] + 1
    version_code = version_data[:version_code] + 1

    update_version(
      major: version_data[:version_major],
      minor: version_data[:version_minor],
      patch: patch,
      version_code: version_code
    )

    UI.success("✅ Version bumped to #{version_data[:version_major]}.#{version_data[:version_minor]}.#{patch} (#{version_code})")
  end
end